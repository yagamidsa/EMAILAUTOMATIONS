import win32com.client
import pythoncom
import time
import os
from typing import List, Dict, Optional, Callable
import logging
from datetime import datetime, timedelta
import math
import random
import json
import csv

class SmartEmailSender:
    """EmailSender INTELIGENTE que LEE configuraci√≥n del EXCEL - PARTE 1"""
    
    def __init__(self):
        self.outlook = None
        self.conectado = False
        self.logger = self._configurar_logger()
        
        # ‚≠ê CONFIGURACI√ìN POR DEFECTO (si Excel no est√° disponible)
        self.config_default = {
            'MAX_CORREOS_DIARIOS': 400,
            'HORAS_TRABAJO': 8,
            'CORREOS_POR_LOTE': 50,
            'MINUTOS_ENTRE_LOTES': 6,
            'EMPEZAR_INMEDIATAMENTE': True
        }
        
        # Variables actuales (se cargan del Excel)
        self.config_actual = self.config_default.copy()
        self.CORREOS_POR_HORA = self.config_actual['MAX_CORREOS_DIARIOS'] // self.config_actual['HORAS_TRABAJO']
        
        # L√çMITES ANTI-SPAM DIN√ÅMICOS
        self.LIMITE_RAPIDO = 25  # Base m√≠nima
        self.PAUSA_CORTA = 30    # 30 segundos entre correos normales
        self.PAUSA_LARGA = self.config_actual['MINUTOS_ENTRE_LOTES'] * 60  # En segundos
        self.PAUSA_ALEATORIA = (15, 60)  # Variaci√≥n aleatoria
        
        # Para reportes
        self.reportes_folder = "reportes"
        self.ultimo_asunto = ""
        self.ultimo_contenido = ""
        os.makedirs(self.reportes_folder, exist_ok=True)
        
        print(f"üìä CONFIGURACI√ìN INICIAL (Default):")
        self.mostrar_configuracion_actual()
        
    def cargar_configuracion_excel(self, config_excel: Dict = None) -> bool:
        """‚≠ê CARGAR configuraci√≥n desde CONFIGURACION.xlsx"""
        
        print("‚öôÔ∏è CARGANDO CONFIGURACI√ìN DESDE EXCEL...")
        
        if not config_excel or 'error' in config_excel:
            print("‚ö†Ô∏è No hay configuraci√≥n Excel v√°lida - usando valores por defecto")
            return False
        
        try:
            config_data = config_excel.get('config', {})
            
            # Mapear campos del Excel a configuraci√≥n interna
            campos_excel = {
                'Total_Correos_Por_Dia': 'MAX_CORREOS_DIARIOS',
                'Horas_Para_Enviar_Todo': 'HORAS_TRABAJO', 
                'Correos_Por_Lote': 'CORREOS_POR_LOTE',
                'Minutos_Entre_Lotes': 'MINUTOS_ENTRE_LOTES',
                'Empezar_Inmediatamente': 'EMPEZAR_INMEDIATAMENTE'
            }
            
            # Cargar valores del Excel
            cambios = []
            for campo_excel, campo_interno in campos_excel.items():
                if campo_excel in config_data:
                    valor_excel = config_data[campo_excel]
                    
                    # Procesar seg√∫n tipo
                    if campo_interno == 'EMPEZAR_INMEDIATAMENTE':
                        # Convertir S√ç/NO a boolean
                        nuevo_valor = str(valor_excel).upper() in ['S√ç', 'SI', 'YES', 'TRUE', '1']
                    else:
                        # Convertir a n√∫mero
                        try:
                            nuevo_valor = int(float(valor_excel))
                        except:
                            print(f"‚ö†Ô∏è Valor inv√°lido para {campo_excel}: {valor_excel}")
                            continue
                    
                    # Validar rangos
                    if campo_interno == 'MAX_CORREOS_DIARIOS' and not (1 <= nuevo_valor <= 1000):
                        print(f"‚ö†Ô∏è {campo_excel} fuera de rango (1-1000): {nuevo_valor}")
                        continue
                    elif campo_interno == 'HORAS_TRABAJO' and not (1 <= nuevo_valor <= 24):
                        print(f"‚ö†Ô∏è {campo_excel} fuera de rango (1-24): {nuevo_valor}")
                        continue
                    elif campo_interno == 'CORREOS_POR_LOTE' and not (1 <= nuevo_valor <= 100):
                        print(f"‚ö†Ô∏è {campo_excel} fuera de rango (1-100): {nuevo_valor}")
                        continue
                    elif campo_interno == 'MINUTOS_ENTRE_LOTES' and not (1 <= nuevo_valor <= 60):
                        print(f"‚ö†Ô∏è {campo_excel} fuera de rango (1-60): {nuevo_valor}")
                        continue
                    
                    # Aplicar cambio
                    valor_anterior = self.config_actual[campo_interno]
                    self.config_actual[campo_interno] = nuevo_valor
                    
                    if valor_anterior != nuevo_valor:
                        cambios.append(f"   ‚Ä¢ {campo_excel}: {valor_anterior} ‚Üí {nuevo_valor}")
            
            # Recalcular valores derivados
            self.CORREOS_POR_HORA = self.config_actual['MAX_CORREOS_DIARIOS'] // self.config_actual['HORAS_TRABAJO']
            self.PAUSA_LARGA = self.config_actual['MINUTOS_ENTRE_LOTES'] * 60
            
            # Ajustar l√≠mite r√°pido seg√∫n configuraci√≥n
            self.LIMITE_RAPIDO = min(25, self.config_actual['CORREOS_POR_LOTE'])
            
            print(f"‚úÖ CONFIGURACI√ìN EXCEL CARGADA")
            if cambios:
                print(f"üîÑ CAMBIOS APLICADOS:")
                for cambio in cambios:
                    print(cambio)
            else:
                print(f"üìä Sin cambios - valores coinciden")
            
            self.logger.info(f"‚úÖ Configuraci√≥n Excel cargada: {len(cambios)} cambios")
            return True
            
        except Exception as e:
            print(f"‚ùå Error cargando configuraci√≥n Excel: {e}")
            self.logger.error(f"‚ùå Error configuraci√≥n Excel: {e}")
            return False
    
    def mostrar_configuracion_actual(self):
        """Mostrar configuraci√≥n actual"""
        print(f"üìä CONFIGURACI√ìN ACTUAL:")
        print(f"   üìà Max correos diarios: {self.config_actual['MAX_CORREOS_DIARIOS']}")
        print(f"   ‚è∞ Horas de trabajo: {self.config_actual['HORAS_TRABAJO']}")
        print(f"   üìß Correos por hora: {self.CORREOS_POR_HORA}")
        print(f"   üì¶ Correos por lote: {self.config_actual['CORREOS_POR_LOTE']}")
        print(f"   ‚è≥ Minutos entre lotes: {self.config_actual['MINUTOS_ENTRE_LOTES']}")
        print(f"   üöÄ Empezar inmediatamente: {self.config_actual['EMPEZAR_INMEDIATAMENTE']}")
        print(f"   üõ°Ô∏è L√≠mite r√°pido: {self.LIMITE_RAPIDO}")
        print(f"   üìÅ Reportes: {self.reportes_folder}")
        
    def _configurar_logger(self):
        """Configurar logging"""
        logger = logging.getLogger('SmartEmailSender')
        logger.setLevel(logging.INFO)
        
        if not logger.handlers:
            os.makedirs('reportes', exist_ok=True)
            fecha = datetime.now().strftime('%Y-%m-%d')
            archivo_log = f'reportes/envios_inteligente_{fecha}.log'
            
            file_handler = logging.FileHandler(archivo_log, encoding='utf-8')
            formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
            file_handler.setFormatter(formatter)
            logger.addHandler(file_handler)
            
        return logger
    
    def conectar_outlook(self) -> Dict:
        """Conectar con Outlook"""
        try:
            self.logger.info("üîÑ Conectando con Outlook...")
            pythoncom.CoInitialize()
            
            try:
                self.outlook = win32com.client.GetActiveObject("Outlook.Application")
                self.logger.info("‚úÖ Conectado a instancia existente")
            except:
                self.outlook = win32com.client.Dispatch("Outlook.Application")
                self.logger.info("‚úÖ Nueva instancia creada")
            
            namespace = self.outlook.GetNamespace("MAPI")
            inbox = namespace.GetDefaultFolder(6)
            
            accounts = namespace.Accounts
            if accounts.Count == 0:
                raise Exception("No hay cuentas configuradas en Outlook")
            
            cuenta_principal = accounts.Item(1)
            email_cuenta = getattr(cuenta_principal, 'SmtpAddress', cuenta_principal.DisplayName)
            
            self.conectado = True
            self.logger.info(f"‚úÖ Conectado - Cuenta: {email_cuenta}")
            
            return {
                'exitoso': True,
                'mensaje': f'Conectado a Outlook correctamente',
                'cuenta': email_cuenta,
                'total_cuentas': accounts.Count
            }
            
        except Exception as e:
            self.conectado = False
            error_msg = str(e)
            self.logger.error(f"‚ùå Error conexi√≥n: {error_msg}")
            
            return {
                'exitoso': False,
                'mensaje': error_msg,
                'sugerencia': self._obtener_sugerencia_error(error_msg)
            }
    
    def _obtener_sugerencia_error(self, error_msg: str) -> str:
        """Sugerencias seg√∫n el error"""
        error_lower = error_msg.lower()
        
        if "class not registered" in error_lower:
            return "Instala/repara Microsoft Office"
        elif "rpc server" in error_lower:
            return "Abre Outlook manualmente primero"
        elif "no hay cuentas" in error_lower:
            return "Configura una cuenta en Outlook"
        elif "access denied" in error_lower:
            return "Ejecuta como administrador"
        else:
            return "Verifica que Outlook est√© instalado y funcionando"
    
    def calcular_estrategia_envio(self, total_correos: int, config_excel: Dict = None) -> Dict:
        """‚≠ê CALCULAR ESTRATEGIA usando configuraci√≥n del EXCEL"""
        
        # Cargar configuraci√≥n Excel si se proporciona
        if config_excel:
            self.cargar_configuracion_excel(config_excel)
        
        print(f"\nüéØ CALCULANDO ESTRATEGIA para {total_correos} correos...")
        print(f"üìä Usando configuraci√≥n:")
        print(f"   ‚Ä¢ Max diarios: {self.config_actual['MAX_CORREOS_DIARIOS']}")
        print(f"   ‚Ä¢ Horas trabajo: {self.config_actual['HORAS_TRABAJO']}")
        print(f"   ‚Ä¢ Lote m√°ximo: {self.config_actual['CORREOS_POR_LOTE']}")
        print(f"   ‚Ä¢ Pausa entre lotes: {self.config_actual['MINUTOS_ENTRE_LOTES']}m")
        
        estrategia = {
            'total_correos': total_correos,
            'modo': '',
            'descripcion': '',
            'tiempo_estimado': '',
            'lotes': [],
            'pausas': {},
            'config_usada': self.config_actual.copy()
        }
        
        # VERIFICAR L√çMITE DIARIO
        if total_correos > self.config_actual['MAX_CORREOS_DIARIOS']:
            print(f"‚ö†Ô∏è ADVERTENCIA: {total_correos} correos superan el l√≠mite diario de {self.config_actual['MAX_CORREOS_DIARIOS']}")
            print(f"üìä Se procesar√°n solo los primeros {self.config_actual['MAX_CORREOS_DIARIOS']}")
            total_correos = self.config_actual['MAX_CORREOS_DIARIOS']
            estrategia['total_correos'] = total_correos
            estrategia['advertencia'] = f'Limitado a {self.config_actual["MAX_CORREOS_DIARIOS"]} correos'
        
        if total_correos <= 2:
            # MODO INMEDIATO: Muy pocos correos
            estrategia.update({
                'modo': 'INMEDIATO',
                'descripcion': 'Env√≠o inmediato sin pausas',
                'tiempo_estimado': '< 1 minuto',
                'lotes': [{'cantidad': total_correos, 'pausa_despues': 0}],
                'pausas': {'entre_correos': 5, 'entre_lotes': 0}
            })
            
        elif total_correos <= self.LIMITE_RAPIDO:
            # MODO R√ÅPIDO: Hasta el l√≠mite r√°pido con pausas cortas
            tiempo_total = total_correos * self.PAUSA_CORTA
            estrategia.update({
                'modo': 'R√ÅPIDO',
                'descripcion': f'Env√≠o con pausas cortas de {self.PAUSA_CORTA}s',
                'tiempo_estimado': f'{tiempo_total // 60}m {tiempo_total % 60}s',
                'lotes': [{'cantidad': total_correos, 'pausa_despues': 0}],
                'pausas': {'entre_correos': self.PAUSA_CORTA, 'entre_lotes': 0}
            })
            
        else:
            # MODO DISTRIBUIDO: Usar configuraci√≥n del Excel
            correos_por_lote = self.config_actual['CORREOS_POR_LOTE']
            lotes_necesarios = math.ceil(total_correos / correos_por_lote)
            
            # Crear lotes
            lotes = []
            correos_restantes = total_correos
            
            for i in range(lotes_necesarios):
                cantidad_lote = min(correos_por_lote, correos_restantes)
                
                # Pausa despu√©s del lote (excepto el √∫ltimo)
                pausa_despues = self.PAUSA_LARGA if i < lotes_necesarios - 1 else 0
                
                lotes.append({
                    'numero': i + 1,
                    'cantidad': cantidad_lote,
                    'pausa_despues': pausa_despues
                })
                
                correos_restantes -= cantidad_lote
            
            # Tiempo estimado usando configuraci√≥n
            tiempo_envios = total_correos * 15  # 15 seg promedio por env√≠o
            tiempo_pausas = (lotes_necesarios - 1) * self.PAUSA_LARGA
            tiempo_total = tiempo_envios + tiempo_pausas
            
            horas = tiempo_total // 3600
            minutos = (tiempo_total % 3600) // 60
            
            # Verificar si cabe en las horas de trabajo
            horas_configuradas = self.config_actual['HORAS_TRABAJO']
            if horas > horas_configuradas:
                print(f"‚ö†Ô∏è TIEMPO EXCEDIDO: {horas}h estimadas > {horas_configuradas}h configuradas")
                estrategia['advertencia_tiempo'] = f'Excede {horas_configuradas}h configuradas'
            
            estrategia.update({
                'modo': 'DISTRIBUIDO',
                'descripcion': f'{lotes_necesarios} lotes de ~{correos_por_lote} correos (seg√∫n Excel)',
                'tiempo_estimado': f'{horas}h {minutos}m' if horas > 0 else f'{minutos}m',
                'lotes': lotes,
                'pausas': {
                    'entre_correos': random.randint(*self.PAUSA_ALEATORIA),
                    'entre_lotes': self.PAUSA_LARGA
                }
            })
        
        return estrategia
    
    def mostrar_estrategia(self, estrategia: Dict) -> str:
        """‚≠ê MOSTRAR estrategia con datos del Excel"""
        
        resumen = f"üéØ ESTRATEGIA DE ENV√çO (Configuraci√≥n Excel)\n"
        resumen += f"=" * 55 + "\n\n"
        
        resumen += f"üìä Total correos: {estrategia['total_correos']}\n"
        resumen += f"üöÄ Modo: {estrategia['modo']}\n"
        resumen += f"üìù Descripci√≥n: {estrategia['descripcion']}\n"
        resumen += f"‚è∞ Tiempo estimado: {estrategia['tiempo_estimado']}\n"
        
        # Mostrar advertencias
        if 'advertencia' in estrategia:
            resumen += f"‚ö†Ô∏è Advertencia: {estrategia['advertencia']}\n"
        if 'advertencia_tiempo' in estrategia:
            resumen += f"‚ö†Ô∏è Tiempo: {estrategia['advertencia_tiempo']}\n"
        
        resumen += f"\n‚öôÔ∏è CONFIGURACI√ìN EXCEL USADA:\n"
        config = estrategia.get('config_usada', {})
        resumen += f"   ‚Ä¢ Max diarios: {config.get('MAX_CORREOS_DIARIOS', 'N/A')}\n"
        resumen += f"   ‚Ä¢ Horas trabajo: {config.get('HORAS_TRABAJO', 'N/A')}\n"
        resumen += f"   ‚Ä¢ Correos por lote: {config.get('CORREOS_POR_LOTE', 'N/A')}\n"
        resumen += f"   ‚Ä¢ Minutos entre lotes: {config.get('MINUTOS_ENTRE_LOTES', 'N/A')}\n"
        
        resumen += f"\n"
        
        if estrategia['modo'] == 'INMEDIATO':
            resumen += f"‚úÖ Env√≠o inmediato sin esperas\n"
            resumen += f"üöÄ Perfecto para pocos correos\n"
            
        elif estrategia['modo'] == 'R√ÅPIDO':
            resumen += f"‚ö° Pausa entre correos: {estrategia['pausas']['entre_correos']}s\n"
            resumen += f"‚úÖ Sin riesgo de spam\n"
            
        else:  # DISTRIBUIDO
            resumen += f"üì¶ LOTES PROGRAMADOS (seg√∫n Excel):\n"
            for lote in estrategia['lotes']:
                resumen += f"   ‚Ä¢ Lote {lote['numero']}: {lote['cantidad']} correos"
                if lote['pausa_despues'] > 0:
                    resumen += f" ‚Üí Pausa {lote['pausa_despues'] // 60}m"
                resumen += f"\n"
            
            resumen += f"\n‚è±Ô∏è PAUSAS:\n"
            resumen += f"   ‚Ä¢ Entre correos: {estrategia['pausas']['entre_correos']}s (aleatorio)\n"
            resumen += f"   ‚Ä¢ Entre lotes: {estrategia['pausas']['entre_lotes'] // 60}m (Excel)\n"
        
        resumen += f"\nüõ°Ô∏è PROTECCI√ìN ANTI-SPAM ACTIVADA\n"
        resumen += f"üìÑ Reportes autom√°ticos en: {self.reportes_folder}/\n"
        
        return resumen
    
    def _generar_csv_completo(self, resultados: Dict, nombre_base: str) -> str:
            """Generar CSV con TODOS los datos (exitosos y fallidos) + configuraci√≥n Excel"""
    
            archivo_csv = os.path.join(self.reportes_folder, f"{nombre_base}_COMPLETO.csv")
    
            with open(archivo_csv, 'w', newline='', encoding='utf-8') as f:
                writer = csv.writer(f)
    
                # Headers con informaci√≥n de configuraci√≥n Excel
                writer.writerow(['Email', 'Nombre', 'Empresa', 'Estado', 'Hora_Envio', 'Error', 'Adjuntos', 'Config_Excel_Usada'])
    
                # Configuraci√≥n Excel como string para incluir en cada fila
                config_excel = resultados.get('config_excel_usada', {})
                config_str = f"Lote:{config_excel.get('CORREOS_POR_LOTE', 'N/A')},Pausa:{config_excel.get('MINUTOS_ENTRE_LOTES', 'N/A')}m"
    
                # Exitosos
                for exitoso in resultados.get('exitosos', []):
                    writer.writerow([
                        exitoso.get('email', ''),
                        exitoso.get('nombre', ''),
                        exitoso.get('empresa', ''),
                        'EXITOSO',
                        exitoso.get('timestamp', ''),
                        '',
                        exitoso.get('adjuntos_agregados', 0),
                        config_str
                    ])
    
                # Fallidos
                for fallido in resultados.get('fallidos', []):
                    writer.writerow([
                        fallido.get('email', ''),
                        fallido.get('nombre', ''),
                        fallido.get('empresa', ''),
                        'FALLIDO',
                        '',
                        fallido.get('error', ''),
                        0,
                        config_str
                    ])
    
            return archivo_csv
    
    def _generar_csv_exitosos(self, resultados: Dict, nombre_base: str) -> str:
        """Generar CSV solo con exitosos"""

        archivo_csv = os.path.join(self.reportes_folder, f"{nombre_base}_EXITOSOS.csv")

        with open(archivo_csv, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)

            # Headers compatibles con Excel de clientes
            writer.writerow(['Email', 'Nombre', 'Empresa', 'Mensaje_Personal', 'Hora_Envio', 'Adjuntos'])

            for exitoso in resultados.get('exitosos', []):
                writer.writerow([
                    exitoso.get('email', ''),
                    exitoso.get('nombre', ''),
                    exitoso.get('empresa', ''),
                    '',  # Mensaje personal vac√≠o
                    exitoso.get('timestamp', ''),
                    exitoso.get('adjuntos_agregados', 0)
                ])

        return archivo_csv

    def _generar_csv_fallidos_simple(self, resultados: Dict, nombre_base: str) -> str:
        """Generar CSV solo con correos fallidos para reintento"""

        archivo_csv = os.path.join(self.reportes_folder, f"{nombre_base}_FALLIDOS.csv")

        if not resultados.get('fallidos'):
            # Crear archivo vac√≠o si no hay fallidos
            with open(archivo_csv, 'w', newline='', encoding='utf-8') as f:
                writer = csv.writer(f)
                writer.writerow(['Email', 'Nombre', 'Empresa', 'Mensaje_Personal', 'Error'])
            return archivo_csv

        with open(archivo_csv, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)

            # Headers compatibles con CLIENTES.xlsx
            writer.writerow(['Email', 'Nombre', 'Empresa', 'Mensaje_Personal', 'Error'])

            for fallido in resultados['fallidos']:
                writer.writerow([
                    fallido.get('email', ''),
                    fallido.get('nombre', ''),
                    fallido.get('empresa', ''),
                    fallido.get('mensaje_personal', ''),
                    fallido.get('error', '')
                ])

        return archivo_csv
    
    def _guardar_json_completo_excel(self, resultados: Dict, nombre_base: str) -> str:
        """‚≠ê Guardar resultados completos en JSON CON configuraci√≥n Excel"""

        archivo_json = os.path.join(self.reportes_folder, f"{nombre_base}.json")

        # Convertir datetime a string para JSON
        resultados_json = resultados.copy()

        if 'inicio' in resultados_json:
            resultados_json['inicio'] = resultados_json['inicio'].isoformat()

        if 'fin' in resultados_json:
            resultados_json['fin'] = resultados_json['fin'].isoformat()

        if 'duracion' in resultados_json:
            resultados_json['duracion'] = str(resultados_json['duracion'])

        # ‚≠ê Agregar metadatos de configuraci√≥n Excel
        resultados_json['metadatos'] = {
            'version': 'SmartEmailSender_Excel_v1.0',
            'fecha_generacion': datetime.now().isoformat(),
            'configuracion_excel_aplicada': True,
            'config_excel_usada': resultados.get('config_excel_usada', {}),
            'archivo_origen': 'CONFIGURACION.xlsx'
        }

        with open(archivo_json, 'w', encoding='utf-8') as f:
            json.dump(resultados_json, f, indent=2, ensure_ascii=False)

        return archivo_json
    
    def reintentar_fallidos_simple(self, archivo_fallidos: str = None, adjuntos: List[str] = None, 
                                  callback_progreso: Callable = None, detener_callback: Callable = None,
                                  config_excel: Dict = None) -> Dict:  # ‚≠ê NUEVO PAR√ÅMETRO
        """‚≠ê Reintentar correos fallidos CON configuraci√≥n Excel"""

        correos_reintento = []

        if archivo_fallidos:
            # Leer CSV de fallidos manualmente
            try:
                with open(archivo_fallidos, 'r', encoding='utf-8') as f:
                    reader = csv.DictReader(f)

                    for row in reader:
                        correo = {
                            'email': row['Email'],
                            'nombre': row['Nombre'] if row['Nombre'] else '',
                            'empresa': row['Empresa'] if row['Empresa'] else '',
                            'asunto': self.ultimo_asunto or 'Reintento - Correo importante',
                            'contenido': self.ultimo_contenido or 'Este es un reintento del correo anterior.'
                        }
                        correos_reintento.append(correo)

            except Exception as e:
                self.logger.error(f"Error leyendo archivo de fallidos: {e}")
                return {'error': f'Error leyendo archivo: {e}'}
        else:
            # Buscar fallidos del √∫ltimo env√≠o
            try:
                # Buscar el JSON m√°s reciente
                archivos_json = [f for f in os.listdir(self.reportes_folder) if f.endswith('.json')]
                if not archivos_json:
                    return {'error': 'No se encontraron archivos de resultados previos'}

                archivo_mas_reciente = max(archivos_json, 
                                         key=lambda x: os.path.getctime(os.path.join(self.reportes_folder, x)))
                archivo_completo = os.path.join(self.reportes_folder, archivo_mas_reciente)

                with open(archivo_completo, 'r', encoding='utf-8') as f:
                    resultados_previos = json.load(f)

                fallidos = resultados_previos.get('fallidos', [])
                if not fallidos:
                    return {'error': 'No hay correos fallidos para reintentar'}

                for fallido in fallidos:
                    correo = {
                        'email': fallido['email'],
                        'nombre': fallido['nombre'],
                        'empresa': fallido.get('empresa', ''),
                        'asunto': self.ultimo_asunto or 'Reintento - Correo importante',
                        'contenido': self.ultimo_contenido or 'Este es un reintento del correo anterior.'
                    }
                    correos_reintento.append(correo)

            except Exception as e:
                return {'error': f'Error buscando fallidos previos: {e}'}

        if not correos_reintento:
            return {'error': 'No hay correos para reintentar'}

        self.logger.info(f"üîÑ REINTENTANDO {len(correos_reintento)} correos fallidos CON configuraci√≥n Excel")
        print(f"\nüîÑ REINTENTANDO {len(correos_reintento)} CORREOS FALLIDOS")
        
        # ‚≠ê Aplicar configuraci√≥n Excel si se proporciona
        if config_excel:
            print("‚öôÔ∏è Aplicando configuraci√≥n Excel para reintento...")

        # Usar env√≠o inteligente para el reintento CON configuraci√≥n Excel
        return self.envio_inteligente(correos_reintento, adjuntos or [], callback_progreso, detener_callback, config_excel)

    def mostrar_resumen_rapido(self, resultados: Dict):
        """‚≠ê Mostrar resumen r√°pido en consola CON configuraci√≥n Excel"""
        
        exitosos = len(resultados.get('exitosos', []))
        fallidos = len(resultados.get('fallidos', []))
        total = exitosos + fallidos
        porcentaje = (exitosos / total * 100) if total > 0 else 0
        
        print("\n" + "="*55)
        print("üìä RESUMEN R√ÅPIDO DEL ENV√çO (Configuraci√≥n Excel)")
        print("="*55)
        
        # ‚≠ê Mostrar configuraci√≥n Excel usada
        config_excel = resultados.get('config_excel_usada', {})
        if config_excel:
            print(f"‚öôÔ∏è CONFIGURACI√ìN EXCEL APLICADA:")
            print(f"   üì¶ Correos por lote: {config_excel.get('CORREOS_POR_LOTE', 'N/A')}")
            print(f"   ‚è≥ Minutos entre lotes: {config_excel.get('MINUTOS_ENTRE_LOTES', 'N/A')}")
            print(f"   üìà Max diarios: {config_excel.get('MAX_CORREOS_DIARIOS', 'N/A')}")
            print(f"   ‚è∞ Horas trabajo: {config_excel.get('HORAS_TRABAJO', 'N/A')}")
            print()
        
        print(f"üìä RESULTADOS:")
        print(f"‚úÖ Exitosos: {exitosos}")
        print(f"‚ùå Fallidos: {fallidos}")
        print(f"üìä Total: {total}")
        print(f"üìà √âxito: {porcentaje:.1f}%")
        
        if 'estrategia' in resultados:
            print(f"üéØ Estrategia: {resultados['estrategia'].get('modo', 'N/A')}")
        
        if fallidos > 0:
            print(f"\nüîÑ PARA REINTENTAR:")
            print(f"   1. Revisa el archivo CSV de fallidos")
            print(f"   2. Corrige emails inv√°lidos")
            print(f"   3. Ajusta CONFIGURACION.xlsx si es necesario")
            print(f"   4. Usa funci√≥n reintentar_fallidos_simple()")
            
            # Mostrar algunos emails fallidos
            print(f"\n‚ùå EMAILS FALLIDOS:")
            for i, fallido in enumerate(resultados['fallidos'][:5], 1):
                print(f"   {i}. {fallido.get('email', 'N/A')} - {fallido.get('error', 'Error desconocido')}")
            
            if len(resultados['fallidos']) > 5:
                print(f"   ... y {len(resultados['fallidos']) - 5} m√°s")
        
        print("="*55)
    
    def listar_reportes_disponibles(self) -> List[str]:
        """‚≠ê Listar todos los reportes disponibles CON configuraci√≥n Excel"""
        try:
            archivos = os.listdir(self.reportes_folder)
            reportes = {
                'texto': [f for f in archivos if f.endswith('.txt') and 'reporte_envio_' in f],
                'csv_fallidos': [f for f in archivos if f.endswith('_FALLIDOS.csv')],
                'csv_completos': [f for f in archivos if f.endswith('_COMPLETO.csv')],
                'csv_exitosos': [f for f in archivos if f.endswith('_EXITOSOS.csv')],
                'json': [f for f in archivos if f.endswith('.json') and 'reporte_envio_' in f]
            }
            
            print(f"\nüìÅ REPORTES DISPONIBLES (Con Configuraci√≥n Excel):")
            print(f"   üìÑ Reportes texto: {len(reportes['texto'])}")
            print(f"   üìä CSVs completos: {len(reportes['csv_completos'])}")
            print(f"   ‚úÖ CSVs exitosos: {len(reportes['csv_exitosos'])}")
            print(f"   üîÑ CSVs fallidos: {len(reportes['csv_fallidos'])}")
            print(f"   üíæ JSONs completos: {len(reportes['json'])}")
            
            # Mostrar los 5 m√°s recientes
            todos_reportes = (reportes['texto'] + reportes['csv_completos'] + 
                            reportes['csv_exitosos'] + reportes['csv_fallidos'] + reportes['json'])
            
            if todos_reportes:
                todos_reportes.sort(key=lambda x: os.path.getctime(os.path.join(self.reportes_folder, x)), reverse=True)
                print(f"\nüìã √öLTIMOS 5 REPORTES:")
                for i, archivo in enumerate(todos_reportes[:5], 1):
                    fecha_mod = datetime.fromtimestamp(os.path.getctime(os.path.join(self.reportes_folder, archivo)))
                    tipo = "Excel" if "excel" in archivo else "Cl√°sico"
                    print(f"   {i}. {archivo} - {fecha_mod.strftime('%Y-%m-%d %H:%M')} ({tipo})")
            
            return reportes
            
        except Exception as e:
            print(f"‚ùå Error listando reportes: {e}")
            return []
    
    def obtener_configuracion_de_reporte(self, archivo_json: str) -> Dict:
        """‚≠ê NUEVA: Obtener configuraci√≥n Excel de un reporte previo"""
        try:
            ruta_completa = os.path.join(self.reportes_folder, archivo_json)
            
            if not os.path.exists(ruta_completa):
                return {'error': f'Archivo no encontrado: {archivo_json}'}
            
            with open(ruta_completa, 'r', encoding='utf-8') as f:
                datos = json.load(f)
            
            config_excel = datos.get('config_excel_usada', {})
            metadatos = datos.get('metadatos', {})
            
            if not config_excel:
                return {'error': 'No hay configuraci√≥n Excel en este reporte'}
            
            print(f"üìä CONFIGURACI√ìN EXCEL DEL REPORTE:")
            print(f"   üìÑ Archivo: {archivo_json}")
            print(f"   üìÖ Fecha: {metadatos.get('fecha_generacion', 'N/A')}")
            print(f"   üìà Max diarios: {config_excel.get('MAX_CORREOS_DIARIOS')}")
            print(f"   ‚è∞ Horas trabajo: {config_excel.get('HORAS_TRABAJO')}")
            print(f"   üì¶ Correos por lote: {config_excel.get('CORREOS_POR_LOTE')}")
            print(f"   ‚è≥ Minutos entre lotes: {config_excel.get('MINUTOS_ENTRE_LOTES')}")
            print(f"   üöÄ Empezar inmediatamente: {config_excel.get('EMPEZAR_INMEDIATAMENTE')}")
            
            return {
                'config': config_excel,
                'metadatos': metadatos,
                'exitoso': True
            }
            
        except Exception as e:
            return {'error': f'Error leyendo configuraci√≥n: {e}'}
    
    def aplicar_configuracion_desde_reporte(self, archivo_json: str) -> bool:
        """‚≠ê NUEVA: Aplicar configuraci√≥n Excel desde un reporte previo"""
        try:
            config_data = self.obtener_configuracion_de_reporte(archivo_json)
            
            if 'error' in config_data:
                print(f"‚ùå {config_data['error']}")
                return False
            
            # Aplicar configuraci√≥n
            config_excel = {'config': config_data['config']}
            exito = self.cargar_configuracion_excel(config_excel)
            
            if exito:
                print(f"‚úÖ Configuraci√≥n aplicada desde: {archivo_json}")
                print("üìä Nueva configuraci√≥n activa:")
                self.mostrar_configuracion_actual()
            else:
                print(f"‚ùå Error aplicando configuraci√≥n desde: {archivo_json}")
            
            return exito
            
        except Exception as e:
            print(f"‚ùå Error aplicando configuraci√≥n: {e}")
            return False
    
    def comparar_configuraciones_reportes(self, archivo1: str, archivo2: str):
        """‚≠ê NUEVA: Comparar configuraciones Excel entre dos reportes"""
        try:
            config1 = self.obtener_configuracion_de_reporte(archivo1)
            config2 = self.obtener_configuracion_de_reporte(archivo2)
            
            if 'error' in config1 or 'error' in config2:
                print("‚ùå Error leyendo uno de los reportes")
                return
            
            cfg1 = config1['config']
            cfg2 = config2['config']
            
            print(f"\nüìä COMPARACI√ìN DE CONFIGURACIONES:")
            print(f"=" * 50)
            print(f"üìÑ Reporte 1: {archivo1}")
            print(f"üìÑ Reporte 2: {archivo2}")
            print(f"=" * 50)
            
            campos = ['MAX_CORREOS_DIARIOS', 'HORAS_TRABAJO', 'CORREOS_POR_LOTE', 'MINUTOS_ENTRE_LOTES', 'EMPEZAR_INMEDIATAMENTE']
            
            for campo in campos:
                val1 = cfg1.get(campo, 'N/A')
                val2 = cfg2.get(campo, 'N/A')
                
                if val1 == val2:
                    estado = "="
                elif val1 > val2:
                    estado = "‚Üë"
                else:
                    estado = "‚Üì"
                
                print(f"{campo:25} | {val1:>8} {estado} {val2:<8}")
            
            print(f"=" * 50)
            
        except Exception as e:
            print(f"‚ùå Error comparando: {e}")

    def probar_conexion(self) -> str:
        """‚≠ê Probar conexi√≥n con Outlook MEJORADO con configuraci√≥n"""
        conexion = self.conectar_outlook()
        
        if conexion['exitoso']:
            try:
                # Informaci√≥n detallada
                namespace = self.outlook.GetNamespace("MAPI")
                accounts = namespace.Accounts
                
                reporte = "‚úÖ CONEXI√ìN CON OUTLOOK EXITOSA\n"
                reporte += "="*50 + "\n"
                reporte += f"üìß Total cuentas: {accounts.Count}\n"
                
                if accounts.Count > 0:
                    cuenta_principal = accounts.Item(1)
                    reporte += f"üìÆ Cuenta principal: {cuenta_principal.DisplayName}\n"
                    
                    if hasattr(cuenta_principal, 'SmtpAddress') and cuenta_principal.SmtpAddress:
                        reporte += f"üìß Email: {cuenta_principal.SmtpAddress}\n"
                
                # Verificar carpetas
                try:
                    inbox = namespace.GetDefaultFolder(6)
                    sent = namespace.GetDefaultFolder(5)
                    reporte += f"üì• Bandeja entrada: Accesible\n"
                    reporte += f"üì§ Elementos enviados: Accesible\n"
                except:
                    reporte += f"‚ö†Ô∏è Algunas carpetas no accesibles\n"
                
                reporte += f"\nüéØ Estado: LISTO PARA ENVIAR\n"
                reporte += f"üîß COM: Inicializado correctamente\n"
                
                # ‚≠ê Mostrar configuraci√≥n actual
                reporte += f"\n‚öôÔ∏è CONFIGURACI√ìN ACTUAL:\n"
                reporte += f"üìà Max correos diarios: {self.config_actual['MAX_CORREOS_DIARIOS']}\n"
                reporte += f"üì¶ Correos por lote: {self.config_actual['CORREOS_POR_LOTE']}\n"
                reporte += f"‚è≥ Minutos entre lotes: {self.config_actual['MINUTOS_ENTRE_LOTES']}\n"
                reporte += f"üìÅ Reportes: {self.reportes_folder}/\n"
                
                return reporte
                
            except Exception as e:
                return f"‚ö†Ô∏è Conectado con advertencias:\n{str(e)}"
        else:
            reporte = "‚ùå ERROR DE CONEXI√ìN\n"
            reporte += "="*40 + "\n"
            reporte += f"üö® Error: {conexion['mensaje']}\n"
            if 'sugerencia' in conexion:
                reporte += f"üí° Sugerencia: {conexion['sugerencia']}\n"
            
            reporte += f"\nüîß PASOS PARA SOLUCIONAR:\n"
            reporte += f"1. Abre Microsoft Outlook manualmente\n"
            reporte += f"2. Configura al menos una cuenta de email\n"
            reporte += f"3. Verifica que Outlook funcione\n"
            reporte += f"4. Ejecuta como administrador si persiste\n"
            
            return reporte

# FUNCI√ìN DE PRUEBA COMPLETA CON CONFIGURACI√ìN EXCEL
if __name__ == "__main__":
    print("üß™ PROBANDO SMART EMAIL SENDER CON CONFIGURACI√ìN EXCEL")
    print("=" * 65)
    
    sender = SmartEmailSender()
    
    # ‚≠ê PRUEBA CON CONFIGURACI√ìN EXCEL SIMULADA
    print("\nüîß PROBANDO CONFIGURACI√ìN EXCEL...")
    
    config_excel_test = {
        'config': {
            'Total_Correos_Por_Dia': 300,
            'Horas_Para_Enviar_Todo': 6,
            'Correos_Por_Lote': 30,
            'Minutos_Entre_Lotes': 8,
            'Empezar_Inmediatamente': 'S√ç'
        },
        'valida': True
    }
    
    print("üìä Configuraci√≥n Excel de prueba:")
    for key, value in config_excel_test['config'].items():
        print(f"   {key}: {value}")
    
    # Cargar configuraci√≥n
    sender.cargar_configuracion_excel(config_excel_test)
    
    # Pruebas de estrategia con configuraci√≥n Excel
    casos_prueba = [2, 10, 25, 50, 100, 300]
    
    for caso in casos_prueba:
        print(f"\nüìä CASO: {caso} correos (CON configuraci√≥n Excel)")
        print("-" * 50)
        
        estrategia = sender.calcular_estrategia_envio(caso, config_excel_test)
        print(sender.mostrar_estrategia(estrategia))
    
    # Listar reportes disponibles
    print(f"\n" + "="*65)
    sender.listar_reportes_disponibles()
    
    print("\n‚úÖ Pruebas completadas")
    print("\nüí° NUEVAS FUNCIONES CON CONFIGURACI√ìN EXCEL:")
    print("   üìä sender.envio_inteligente(..., config_excel) - Env√≠o con Excel")
    print("   üîÑ sender.reintentar_fallidos_simple(..., config_excel) - Reintento con Excel")
    print("   üìã sender.obtener_configuracion_de_reporte() - Ver config de reporte")
    print("   ‚öôÔ∏è sender.aplicar_configuracion_desde_reporte() - Aplicar config previa")
    print("   üìä sender.comparar_configuraciones_reportes() - Comparar configs")
    print("   üìÑ sender.mostrar_configuracion_actual() - Ver config actual")
    
    print(f"\nüéØ INTEGRACI√ìN CON GUI:")
    print("   En gui.py cambiar:")
    print("   resultados = sender.envio_inteligente(correos, adjuntos, callback, detener)")
    print("   POR:")
    print("   config = excel_mgr.cargar_configuracion()")
    print("   resultados = sender.envio_inteligente(correos, adjuntos, callback, detener, config)")
    
    input("\nPresiona Enter para cerrar...")# CONTINUACI√ìN DE SmartEmailSender - PARTE 2
    
    def enviar_correo(self, correo_data: Dict, adjuntos: List[str] = None) -> Dict:
        """Enviar correo individual"""
        if not self.conectado:
            return {
                'exitoso': False,
                'error': 'No hay conexi√≥n con Outlook'
            }
        
        try:
            pythoncom.CoInitialize()
            
            # Validar datos
            if not correo_data.get('email'):
                raise ValueError("Email del destinatario requerido")
            if not correo_data.get('asunto'):
                raise ValueError("Asunto del correo requerido")
            if not correo_data.get('contenido'):
                raise ValueError("Contenido del correo requerido")
            
            # Crear correo
            mail = self.outlook.CreateItem(0)
            mail.To = correo_data['email'].strip()
            mail.Subject = correo_data['asunto'].strip()
            
            # Configurar contenido
            contenido = correo_data['contenido']
            if '\n' in contenido and '<br>' not in contenido.lower():
                contenido_html = contenido.replace('\n', '<br>')
                mail.HTMLBody = f"""
                <html>
                <body style="font-family: Arial, sans-serif; font-size: 12pt;">
                {contenido_html}
                </body>
                </html>
                """
            else:
                if '<html>' in contenido.lower():
                    mail.HTMLBody = contenido
                else:
                    mail.Body = contenido
            
            # Agregar adjuntos
            adjuntos_agregados = 0
            if adjuntos:
                for ruta_adjunto in adjuntos:
                    if os.path.exists(ruta_adjunto):
                        try:
                            mail.Attachments.Add(ruta_adjunto)
                            adjuntos_agregados += 1
                            self.logger.info(f"üìé Adjunto: {os.path.basename(ruta_adjunto)}")
                        except Exception as attach_error:
                            self.logger.warning(f"‚ö†Ô∏è No se pudo adjuntar {ruta_adjunto}: {attach_error}")
            
            # ENVIAR
            self.logger.info(f"üì§ Enviando a {correo_data['email']}...")
            mail.Send()
            
            timestamp = datetime.now().strftime('%H:%M:%S')
            nombre = correo_data.get('nombre', 'Sin nombre')
            
            self.logger.info(f"‚úÖ ENVIADO: {correo_data['email']} - {nombre}")
            
            return {
                'exitoso': True,
                'timestamp': timestamp,
                'email': correo_data['email'],
                'nombre': nombre,
                'empresa': correo_data.get('empresa', ''),
                'adjuntos_agregados': adjuntos_agregados
            }
            
        except Exception as e:
            error_msg = str(e)
            self.logger.error(f"‚ùå Error enviando a {correo_data.get('email', 'desconocido')}: {error_msg}")
            
            return {
                'exitoso': False,
                'error': error_msg,
                'email': correo_data.get('email', 'desconocido'),
                'nombre': correo_data.get('nombre', 'Sin nombre'),
                'empresa': correo_data.get('empresa', '')
            }
        finally:
            try:
                pythoncom.CoUninitialize()
            except:
                pass
    
    def envio_inteligente(self, correos: List[Dict], adjuntos: List[str], 
                         callback_progreso: Callable = None, 
                         detener_callback: Callable = None,
                         config_excel: Dict = None) -> Dict:  # ‚≠ê NUEVO PAR√ÅMETRO
        """‚≠ê ENV√çO INTELIGENTE usando configuraci√≥n del EXCEL + REPORTES"""
        
        pythoncom.CoInitialize()
        
        # ‚≠ê CARGAR CONFIGURACI√ìN EXCEL AL INICIO
        if config_excel:
            print("\n‚öôÔ∏è APLICANDO CONFIGURACI√ìN DEL EXCEL...")
            self.cargar_configuracion_excel(config_excel)
            print("‚úÖ Configuraci√≥n Excel aplicada\n")
        else:
            print("‚ö†Ô∏è Sin configuraci√≥n Excel - usando valores por defecto")
        
        # ‚≠ê GUARDAR PARA REINTENTOS
        if correos:
            self.ultimo_asunto = correos[0].get('asunto', '')
            self.ultimo_contenido = correos[0].get('contenido', '')
        
        # ‚≠ê Calcular estrategia con configuraci√≥n Excel
        estrategia = self.calcular_estrategia_envio(len(correos), config_excel)
        
        self.logger.info("üéØ ENV√çO INTELIGENTE CON CONFIGURACI√ìN EXCEL")
        self.logger.info("=" * 60)
        self.logger.info(f"üìä Total correos: {len(correos)}")
        self.logger.info(f"üöÄ Modo: {estrategia['modo']}")
        self.logger.info(f"üìù {estrategia['descripcion']}")
        self.logger.info(f"‚è∞ Tiempo estimado: {estrategia['tiempo_estimado']}")
        
        # Log de configuraci√≥n usada
        config_usada = estrategia.get('config_usada', {})
        self.logger.info(f"‚öôÔ∏è Configuraci√≥n Excel:")
        self.logger.info(f"   Max diarios: {config_usada.get('MAX_CORREOS_DIARIOS')}")
        self.logger.info(f"   Correos por lote: {config_usada.get('CORREOS_POR_LOTE')}")
        self.logger.info(f"   Minutos entre lotes: {config_usada.get('MINUTOS_ENTRE_LOTES')}")
        
        resultados = {
            'exitosos': [],
            'fallidos': [],
            'total_procesados': 0,
            'inicio': datetime.now(),
            'estrategia': estrategia,
            'config_excel_usada': config_usada
        }
        
        try:
            # Verificar adjuntos
            if adjuntos:
                adjuntos_faltantes = [adj for adj in adjuntos if not os.path.exists(adj)]
                if adjuntos_faltantes:
                    error_msg = f"Adjuntos faltantes: {adjuntos_faltantes}"
                    self.logger.error(f"‚ùå {error_msg}")
                    return {'error': error_msg}
                
                self.logger.info(f"üìé {len(adjuntos)} adjuntos verificados")
            
            # PROCESAR SEG√öN ESTRATEGIA (usando configuraci√≥n Excel)
            correo_actual = 0
            
            if estrategia['modo'] == 'INMEDIATO':
                # Env√≠o inmediato
                self.logger.info("üöÄ MODO INMEDIATO - Sin pausas")
                
                for i, correo in enumerate(correos):
                    if detener_callback and detener_callback():
                        break
                    
                    if callback_progreso:
                        progreso = ((i + 1) / len(correos)) * 100
                        callback_progreso(progreso, f"Enviando {i+1}/{len(correos)} - {correo.get('nombre', 'Sin nombre')}")
                    
                    resultado = self.enviar_correo(correo, adjuntos)
                    self._procesar_resultado(resultado, resultados)
                    
                    # Solo pausa m√≠nima
                    if i < len(correos) - 1:
                        time.sleep(5)
            
            elif estrategia['modo'] == 'R√ÅPIDO':
                # Env√≠o r√°pido con pausas cortas
                self.logger.info(f"‚ö° MODO R√ÅPIDO - Pausas de {estrategia['pausas']['entre_correos']}s")
                
                for i, correo in enumerate(correos):
                    if detener_callback and detener_callback():
                        break
                    
                    if callback_progreso:
                        progreso = ((i + 1) / len(correos)) * 100
                        callback_progreso(progreso, f"Enviando {i+1}/{len(correos)} - {correo.get('nombre', 'Sin nombre')}")
                    
                    resultado = self.enviar_correo(correo, adjuntos)
                    self._procesar_resultado(resultado, resultados)
                    
                    # Pausa corta entre correos
                    if i < len(correos) - 1:
                        self._pausa_inteligente(estrategia['pausas']['entre_correos'], 
                                              f"Pausa r√°pida", callback_progreso, detener_callback)
            
            else:  # MODO DISTRIBUIDO con configuraci√≥n Excel
                self.logger.info(f"üì¶ MODO DISTRIBUIDO - {len(estrategia['lotes'])} lotes (Excel: {config_usada.get('CORREOS_POR_LOTE')} por lote)")
                
                for num_lote, lote in enumerate(estrategia['lotes']):
                    if detener_callback and detener_callback():
                        break
                    
                    self.logger.info(f"üì¶ LOTE {lote['numero']}/{len(estrategia['lotes'])}: {lote['cantidad']} correos")
                    
                    # Procesar correos del lote
                    fin_lote = min(correo_actual + lote['cantidad'], len(correos))
                    
                    for i in range(correo_actual, fin_lote):
                        if detener_callback and detener_callback():
                            break
                        
                        correo = correos[i]
                        
                        if callback_progreso:
                            progreso = ((i + 1) / len(correos)) * 100
                            lote_info = f"Lote {lote['numero']}/{len(estrategia['lotes'])}"
                            callback_progreso(progreso, f"{lote_info} - {correo.get('nombre', 'Sin nombre')} ({i+1}/{len(correos)})")
                        
                        resultado = self.enviar_correo(correo, adjuntos)
                        self._procesar_resultado(resultado, resultados)
                        
                        # Pausa aleatoria entre correos del mismo lote
                        if i < fin_lote - 1:
                            pausa = random.randint(*self.PAUSA_ALEATORIA)
                            self._pausa_inteligente(pausa, f"Entre correos", callback_progreso, detener_callback)
                    
                    correo_actual = fin_lote
                    
                    # Pausa larga entre lotes (usando configuraci√≥n Excel)
                    if lote['pausa_despues'] > 0 and not (detener_callback and detener_callback()):
                        minutos_pausa = config_usada.get('MINUTOS_ENTRE_LOTES', 6)
                        self.logger.info(f"‚è≥ Pausa entre lotes: {minutos_pausa} minutos (seg√∫n Excel)")
                        
                        siguiente_lote = num_lote + 2  # +2 porque empezamos desde 1
                        if siguiente_lote <= len(estrategia['lotes']):
                            mensaje_pausa = f"Pausa {minutos_pausa}m (Excel) - Siguiente: Lote {siguiente_lote}"
                        else:
                            mensaje_pausa = f"Pausa final de {minutos_pausa}m"
                        
                        self._pausa_inteligente(lote['pausa_despues'], mensaje_pausa, callback_progreso, detener_callback)
        
        finally:
            try:
                pythoncom.CoUninitialize()
            except:
                pass
        
        # Finalizar
        resultados['fin'] = datetime.now()
        resultados['duracion'] = resultados['fin'] - resultados['inicio']
        
        self._log_resumen_final(resultados)
        
        # ‚≠ê GENERAR REPORTE AUTOM√ÅTICAMENTE con configuraci√≥n Excel
        try:
            self.logger.info("üìä Generando reporte detallado con configuraci√≥n Excel...")
            archivo_reporte = self.generar_reporte_detallado(resultados)
            self.logger.info(f"üìÑ Reporte guardado: {archivo_reporte}")
            
        except Exception as e:
            print(f"‚ùå Error generando reporte: {e}")
            self.logger.error(f"‚ùå Error reporte: {e}")
        
        return resultados
    
    def _procesar_resultado(self, resultado: Dict, resultados: Dict):
        """Procesar resultado individual"""
        if resultado['exitoso']:
            resultados['exitosos'].append(resultado)
            self.logger.info(f"‚úÖ √âXITO: {resultado['email']}")
        else:
            resultados['fallidos'].append(resultado)
            self.logger.error(f"‚ùå FALLO: {resultado['email']} - {resultado['error']}")
        
        resultados['total_procesados'] += 1
    
    def _pausa_inteligente(self, segundos: int, descripcion: str, 
                          callback_progreso: Callable, detener_callback: Callable):
        """Pausa inteligente con actualizaciones"""
        
        for segundo in range(segundos):
            if detener_callback and detener_callback():
                break
            
            # Actualizar progreso cada 10 segundos
            if segundo % 10 == 0 and callback_progreso:
                tiempo_restante = segundos - segundo
                minutos = tiempo_restante // 60
                segs = tiempo_restante % 60
                
                if minutos > 0:
                    tiempo_texto = f"{minutos}m {segs}s"
                else:
                    tiempo_texto = f"{segs}s"
                
                callback_progreso(None, f"{descripcion} - Restante: {tiempo_texto}")
            
            time.sleep(1)
    
    def _log_resumen_final(self, resultados: Dict):
        """Log del resumen final con configuraci√≥n Excel"""
        self.logger.info("=" * 60)
        self.logger.info("üìä RESUMEN FINAL DEL ENV√çO INTELIGENTE (Excel)")
        self.logger.info("=" * 60)
        self.logger.info(f"üéØ Estrategia: {resultados['estrategia']['modo']}")
        
        # Log configuraci√≥n Excel usada
        config_excel = resultados.get('config_excel_usada', {})
        if config_excel:
            self.logger.info(f"‚öôÔ∏è Configuraci√≥n Excel:")
            self.logger.info(f"   Max diarios: {config_excel.get('MAX_CORREOS_DIARIOS')}")
            self.logger.info(f"   Correos por lote: {config_excel.get('CORREOS_POR_LOTE')}")
            self.logger.info(f"   Minutos entre lotes: {config_excel.get('MINUTOS_ENTRE_LOTES')}")
        
        self.logger.info(f"‚úÖ Exitosos: {len(resultados['exitosos'])}")
        self.logger.info(f"‚ùå Fallidos: {len(resultados['fallidos'])}")
        self.logger.info(f"üìä Total: {resultados['total_procesados']}")
        self.logger.info(f"‚è±Ô∏è Duraci√≥n: {resultados['duracion']}")
        
        if resultados['fallidos']:
            self.logger.info("‚ùå ERRORES:")
            for fallo in resultados['fallidos'][:3]:
                self.logger.info(f"   ‚Ä¢ {fallo['email']}: {fallo['error']}")
            
            if len(resultados['fallidos']) > 3:
                self.logger.info(f"   ... y {len(resultados['fallidos']) - 3} m√°s")
        
        self.logger.info("=" * 60)

    # ‚≠ê FUNCIONES DE REPORTE MEJORADAS CON CONFIGURACI√ìN EXCEL
    
    def generar_reporte_detallado(self, resultados: Dict) -> str:
        """‚≠ê Generar reporte completo CON configuraci√≥n Excel"""

        fecha_actual = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
        nombre_reporte = f"reporte_envio_excel_{fecha_actual}"

        # Estad√≠sticas b√°sicas
        total = len(resultados.get('exitosos', [])) + len(resultados.get('fallidos', []))
        exitosos = len(resultados.get('exitosos', []))
        fallidos = len(resultados.get('fallidos', []))
        porcentaje_exito = (exitosos / total * 100) if total > 0 else 0

        # 1. REPORTE DE TEXTO DETALLADO con configuraci√≥n Excel
        reporte_texto = self._generar_reporte_texto_excel(resultados, exitosos, fallidos, porcentaje_exito)

        # 2. CSV COMPLETO (exitosos + fallidos)
        archivo_csv_completo = self._generar_csv_completo(resultados, nombre_reporte)

        # 3. CSV DE FALLIDOS PARA REINTENTO
        archivo_fallidos = self._generar_csv_fallidos_simple(resultados, nombre_reporte)

        # 4. CSV DE EXITOSOS 
        archivo_exitosos = self._generar_csv_exitosos(resultados, nombre_reporte)

        # 5. JSON COMPLETO con configuraci√≥n Excel
        archivo_json = self._guardar_json_completo_excel(resultados, nombre_reporte)

        # Guardar reporte texto
        archivo_texto = os.path.join(self.reportes_folder, f"{nombre_reporte}.txt")
        with open(archivo_texto, 'w', encoding='utf-8') as f:
            f.write(reporte_texto)

        # Mostrar resumen r√°pido
        self.mostrar_resumen_rapido(resultados)

        print(f"\nüìä REPORTES GENERADOS CON CONFIGURACI√ìN EXCEL:")
        print(f"   üìÑ Reporte completo: {archivo_texto}")
        print(f"   üìä CSV completo: {archivo_csv_completo}")
        print(f"   ‚úÖ CSV exitosos: {archivo_exitosos}")
        print(f"   üîÑ CSV fallidos: {archivo_fallidos}")
        print(f"   üíæ JSON completo: {archivo_json}")

        return archivo_texto
    
    def _generar_reporte_texto_excel(self, resultados: Dict, exitosos: int, fallidos: int, porcentaje_exito: float) -> str:
        """‚≠ê Generar reporte en texto con configuraci√≥n Excel"""

        reporte = "üìß REPORTE COMPLETO - ENV√çO INTELIGENTE CON EXCEL\n"
        reporte += "=" * 65 + "\n\n"

        # RESUMEN EJECUTIVO
        reporte += "üìä RESUMEN EJECUTIVO\n"
        reporte += "-" * 30 + "\n"
        reporte += f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"

        # ‚≠ê CONFIGURACI√ìN EXCEL USADA
        config_excel = resultados.get('config_excel_usada', {})
        if config_excel:
            reporte += f"\n‚öôÔ∏è CONFIGURACI√ìN EXCEL APLICADA:\n"
            reporte += f"   üìà Max correos diarios: {config_excel.get('MAX_CORREOS_DIARIOS', 'N/A')}\n"
            reporte += f"   ‚è∞ Horas de trabajo: {config_excel.get('HORAS_TRABAJO', 'N/A')}\n"
            reporte += f"   üì¶ Correos por lote: {config_excel.get('CORREOS_POR_LOTE', 'N/A')}\n"
            reporte += f"   ‚è≥ Minutos entre lotes: {config_excel.get('MINUTOS_ENTRE_LOTES', 'N/A')}\n"
            reporte += f"   üöÄ Empezar inmediatamente: {config_excel.get('EMPEZAR_INMEDIATAMENTE', 'N/A')}\n"

        if 'estrategia' in resultados:
            estrategia = resultados['estrategia']
            reporte += f"\nüéØ ESTRATEGIA CALCULADA:\n"
            reporte += f"   üöÄ Modo: {estrategia.get('modo', 'N/A')}\n"
            reporte += f"   üìù Descripci√≥n: {estrategia.get('descripcion', 'N/A')}\n"
            reporte += f"   ‚è∞ Tiempo estimado: {estrategia.get('tiempo_estimado', 'N/A')}\n"
            
            # Advertencias de la estrategia
            if 'advertencia' in estrategia:
                reporte += f"   ‚ö†Ô∏è Advertencia: {estrategia['advertencia']}\n"
            if 'advertencia_tiempo' in estrategia:
                reporte += f"   ‚ö†Ô∏è Tiempo: {estrategia['advertencia_tiempo']}\n"

        reporte += f"\nüìä RESULTADOS:\n"
        reporte += f"   ‚úÖ Exitosos: {exitosos}\n"
        reporte += f"   ‚ùå Fallidos: {fallidos}\n"
        reporte += f"   üìà Total procesados: {exitosos + fallidos}\n"
        reporte += f"   üìä Porcentaje de √©xito: {porcentaje_exito:.1f}%\n"

        if 'duracion' in resultados:
            reporte += f"   ‚è±Ô∏è Duraci√≥n total: {resultados['duracion']}\n"

        # AN√ÅLISIS CON CONFIGURACI√ìN EXCEL
        reporte += f"\nüìà AN√ÅLISIS DE RESULTADOS\n"
        reporte += "-" * 30 + "\n"

        if porcentaje_exito >= 95:
            reporte += "üéâ EXCELENTE: Env√≠o muy exitoso\n"
            reporte += "‚úÖ La configuraci√≥n Excel funcion√≥ perfectamente\n"
        elif porcentaje_exito >= 85:
            reporte += "‚úÖ BUENO: Env√≠o exitoso con pocos problemas\n"
            reporte += "üìä La configuraci√≥n Excel fue efectiva\n"
        elif porcentaje_exito >= 70:
            reporte += "‚ö†Ô∏è REGULAR: Env√≠o con algunos problemas\n"
            reporte += "üîß Considera ajustar la configuraci√≥n Excel\n"
        else:
            reporte += "üö® PROBLEM√ÅTICO: Muchos fallos\n"
            reporte += "‚öôÔ∏è Revisar configuraci√≥n Excel y datos de entrada\n"

        # EFECTIVIDAD DE LA CONFIGURACI√ìN EXCEL
        if config_excel:
            total_procesado = exitosos + fallidos
            max_configurado = config_excel.get('MAX_CORREOS_DIARIOS', 0)
            
            reporte += f"\n‚öôÔ∏è EFECTIVIDAD DE CONFIGURACI√ìN EXCEL:\n"
            if total_procesado <= max_configurado:
                reporte += f"‚úÖ Dentro del l√≠mite diario ({total_procesado}/{max_configurado})\n"
            else:
                reporte += f"‚ö†Ô∏è Excedi√≥ l√≠mite diario ({total_procesado}/{max_configurado})\n"
            
            lote_config = config_excel.get('CORREOS_POR_LOTE', 0)
            if lote_config > 0:
                lotes_usados = math.ceil(total_procesado / lote_config)
                reporte += f"üì¶ Lotes utilizados: {lotes_usados} (configuraci√≥n: {lote_config} por lote)\n"

        # CORREOS EXITOSOS (primeros 10)
        if resultados.get('exitosos'):
            reporte += f"\n‚úÖ CORREOS EXITOSOS ({len(resultados['exitosos'])} total)\n"
            reporte += "-" * 40 + "\n"

            for i, exitoso in enumerate(resultados['exitosos'][:10], 1):
                reporte += f"{i:2d}. {exitoso.get('email', 'N/A')} - {exitoso.get('nombre', 'Sin nombre')}"
                if 'timestamp' in exitoso:
                    reporte += f" ({exitoso['timestamp']})"
                if 'adjuntos_agregados' in exitoso and exitoso['adjuntos_agregados'] > 0:
                    reporte += f" - {exitoso['adjuntos_agregados']} adjuntos"
                reporte += "\n"

            if len(resultados['exitosos']) > 10:
                reporte += f"   ... y {len(resultados['exitosos']) - 10} m√°s\n"

        # CORREOS FALLIDOS (todos)
        if resultados.get('fallidos'):
            reporte += f"\n‚ùå CORREOS FALLIDOS ({len(resultados['fallidos'])} total)\n"
            reporte += "-" * 40 + "\n"

            # Agrupar por tipo de error
            errores_agrupados = {}
            for fallido in resultados['fallidos']:
                error = fallido.get('error', 'Error desconocido')
                if error not in errores_agrupados:
                    errores_agrupados[error] = []
                errores_agrupados[error].append(fallido)

            for error, lista_fallidos in errores_agrupados.items():
                reporte += f"\nüî¥ ERROR: {error} ({len(lista_fallidos)} casos)\n"
                for fallido in lista_fallidos:
                    reporte += f"   ‚Ä¢ {fallido.get('email', 'N/A')} - {fallido.get('nombre', 'Sin nombre')}\n"

        # RECOMENDACIONES CON CONFIGURACI√ìN EXCEL
        reporte += f"\nüí° RECOMENDACIONES\n"
        reporte += "-" * 30 + "\n"

        if fallidos == 0:
            reporte += "üéØ ¬°Perfecto! La configuraci√≥n Excel funcion√≥ √≥ptimamente\n"
            reporte += "‚úÖ No hay acciones requeridas\n"
        else:
            reporte += f"üîÑ Reintentar {fallidos} correos fallidos usando el archivo CSV generado\n"
            reporte += f"üìã Abrir CSV fallidos en Excel para revisar y corregir\n"
            
            if porcentaje_exito < 85:
                reporte += f"\nüîß AJUSTES SUGERIDOS EN CONFIGURACION.xlsx:\n"
                
                if config_excel:
                    lote_actual = config_excel.get('CORREOS_POR_LOTE', 50)
                    pausa_actual = config_excel.get('MINUTOS_ENTRE_LOTES', 6)
                    
                    if porcentaje_exito < 70:
                        nuevo_lote = max(10, lote_actual // 2)
                        nueva_pausa = min(15, pausa_actual * 2)
                        reporte += f"   ‚Ä¢ Reducir Correos_Por_Lote de {lote_actual} a {nuevo_lote}\n"
                        reporte += f"   ‚Ä¢ Aumentar Minutos_Entre_Lotes de {pausa_actual} a {nueva_pausa}\n"
                    else:
                        nuevo_lote = max(20, lote_actual - 10)
                        nueva_pausa = min(10, pausa_actual + 2)
                        reporte += f"   ‚Ä¢ Reducir Correos_Por_Lote de {lote_actual} a {nuevo_lote}\n"
                        reporte += f"   ‚Ä¢ Aumentar Minutos_Entre_Lotes de {pausa_actual} a {nueva_pausa}\n"

        # ARCHIVOS GENERADOS
        reporte += f"\nüìÅ ARCHIVOS GENERADOS\n"
        reporte += "-" * 30 + "\n"
        reporte += "üìä CSV completo con todos los datos y configuraci√≥n Excel\n"
        reporte += "‚úÖ CSV solo con exitosos\n"
        reporte += "üîÑ CSV con correos fallidos para reintento\n"
        reporte += "üíæ JSON con datos completos y configuraci√≥n Excel\n"
        reporte += "üìÑ Este reporte en texto\n"

        reporte += f"\nüîÑ C√ìMO AJUSTAR CONFIGURACI√ìN EXCEL:\n"
        reporte += "-" * 40 + "\n"
        reporte += "1. Abre CONFIGURACION.xlsx\n"
        reporte += "2. Ajusta valores seg√∫n recomendaciones arriba\n"
        reporte += "3. Guarda el archivo\n"
        reporte += "4. Ejecuta el env√≠o nuevamente\n"
        reporte += "5. El sistema usar√° autom√°ticamente la nueva configuraci√≥n\n"

        return reporte    