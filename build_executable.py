# build_executable.py
# Script para crear ejecutable de Email Sender Pro

import os
import subprocess
import sys
from pathlib import Path

def crear_ejecutable():
    """Crear ejecutable completo de Email Sender Pro"""
    
    print("üöÄ CREANDO EJECUTABLE EMAIL SENDER PRO")
    print("=" * 50)
    
    # Verificar que existe el archivo principal
    archivo_principal = "src/gui.py"
    if not os.path.exists(archivo_principal):
        # Buscar archivo alternativo
        posibles = ["gui.py", "src/gui_inteligente.py", "gui_inteligente.py"]
        archivo_principal = None
        for archivo in posibles:
            if os.path.exists(archivo):
                archivo_principal = archivo
                break
        
        if not archivo_principal:
            print("‚ùå No se encontr√≥ el archivo GUI principal")
            print("üìÅ Archivos disponibles:")
            for archivo in os.listdir("."):
                if archivo.endswith(".py"):
                    print(f"   ‚Ä¢ {archivo}")
            return False
    
    print(f"‚úÖ Archivo principal encontrado: {archivo_principal}")
    
    # Crear directorio de distribuci√≥n
    dist_dir = "dist"
    os.makedirs(dist_dir, exist_ok=True)
    
    # Par√°metros de PyInstaller
    comando = [
        "pyinstaller",
        "--onefile",                    # Un solo archivo ejecutable
        "--windowed",                   # Sin consola (importante)
        "--name=EmailSenderPro",        # Nombre del ejecutable
        "--icon=email_icon.ico",        # Icono (opcional)
        "--distpath=dist",              # Carpeta de salida
        "--workpath=build",             # Carpeta temporal
        "--specpath=.",                 # Archivo .spec
        "--clean",                      # Limpiar archivos temporales
        
        # Incluir archivos necesarios
        "--add-data=data;data",         # Carpeta data
        "--add-data=adjuntos;adjuntos", # Carpeta adjuntos
        
        # Librer√≠as espec√≠ficas
        "--hidden-import=pandas",
        "--hidden-import=openpyxl",
        "--hidden-import=win32com.client",
        "--hidden-import=pythoncom",
        "--hidden-import=tkinter",
        "--hidden-import=tkinter.ttk",
        "--hidden-import=tkinter.scrolledtext",
        "--hidden-import=tkinter.messagebox",
        
        archivo_principal
    ]
    
    # Ejecutar PyInstaller
    print(f"\nüî® Compilando ejecutable...")
    print(f"üìù Comando: {' '.join(comando)}")
    
    try:
        resultado = subprocess.run(comando, check=True, capture_output=True, text=True)
        
        print("\n‚úÖ COMPILACI√ìN EXITOSA!")
        print(f"üìÅ Ejecutable creado en: dist/EmailSenderPro.exe")
        
        # Verificar que el archivo existe
        ejecutable = "dist/EmailSenderPro.exe"
        if os.path.exists(ejecutable):
            tama√±o = os.path.getsize(ejecutable) / (1024 * 1024)  # MB
            print(f"üìä Tama√±o: {tama√±o:.1f} MB")
            
            # Crear carpetas necesarias junto al ejecutable
            crear_estructura_ejecutable()
            
            print(f"\nüéâ ¬°LISTO PARA USAR!")
            print(f"üìÅ Ubicaci√≥n: {os.path.abspath(ejecutable)}")
            
            return True
        else:
            print("‚ùå El ejecutable no se cre√≥ correctamente")
            return False
            
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error durante compilaci√≥n:")
        print(f"   {e.stderr}")
        return False
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def crear_estructura_ejecutable():
    """Crear estructura de carpetas junto al ejecutable"""
    
    print(f"\nüìÅ Creando estructura de carpetas...")
    
    # Carpetas necesarias junto al ejecutable
    carpetas = [
        "dist/data",
        "dist/adjuntos", 
        "dist/reportes"
    ]
    
    for carpeta in carpetas:
        os.makedirs(carpeta, exist_ok=True)
        print(f"   ‚úÖ {carpeta}")
    
    # Copiar archivos Excel de ejemplo si existen
    archivos_excel = [
        ("data/CAMPA√ëAS.xlsx", "dist/data/CAMPA√ëAS.xlsx"),
        ("data/CLIENTES.xlsx", "dist/data/CLIENTES.xlsx"),
        ("data/CONFIGURACION.xlsx", "dist/data/CONFIGURACION.xlsx")
    ]
    
    for origen, destino in archivos_excel:
        if os.path.exists(origen):
            import shutil
            shutil.copy2(origen, destino)
            print(f"   üìä Copiado: {os.path.basename(destino)}")
    
    # Crear archivo README
    crear_readme_ejecutable()

def crear_readme_ejecutable():
    """Crear README para el usuario del ejecutable"""
    
    readme_content = """üìß EMAIL SENDER PRO - GU√çA R√ÅPIDA
==========================================

üöÄ C√ìMO USAR:
1. Ejecuta EmailSenderPro.exe
2. Haz clic en "Actualizar Datos"
3. Revisa la campa√±a activa y lista de clientes
4. Agrega archivos adjuntos a la carpeta "adjuntos/"
5. Haz clic en "ENV√çO INTELIGENTE"

üìÅ ESTRUCTURA DE CARPETAS:
‚îú‚îÄ‚îÄ EmailSenderPro.exe          (El programa principal)
‚îú‚îÄ‚îÄ data/                       (Archivos Excel)
‚îÇ   ‚îú‚îÄ‚îÄ CAMPA√ëAS.xlsx          (Tus campa√±as de email)
‚îÇ   ‚îú‚îÄ‚îÄ CLIENTES.xlsx          (Lista de clientes)
‚îÇ   ‚îî‚îÄ‚îÄ CONFIGURACION.xlsx     (Configuraci√≥n del env√≠o)
‚îú‚îÄ‚îÄ adjuntos/                   (Archivos para adjuntar)
‚îî‚îÄ‚îÄ reportes/                   (Reportes de env√≠o generados)

üìä ARCHIVOS EXCEL:
‚Ä¢ CAMPA√ëAS.xlsx: Define el contenido y asunto de tus emails
‚Ä¢ CLIENTES.xlsx: Lista de destinatarios con nombres y empresas  
‚Ä¢ CONFIGURACION.xlsx: Configuraci√≥n de env√≠o (cu√°ntos por d√≠a, etc.)

üìé ADJUNTOS:
‚Ä¢ Coloca archivos PDF, im√°genes, documentos en la carpeta "adjuntos/"
‚Ä¢ Se adjuntar√°n autom√°ticamente a todos los correos

üìã REPORTES:
‚Ä¢ Despu√©s de cada env√≠o se generan reportes autom√°ticos
‚Ä¢ CSV con exitosos y fallidos para seguimiento
‚Ä¢ √ösalos para reintentar correos que fallaron

‚ö†Ô∏è REQUISITOS:
‚Ä¢ Microsoft Outlook instalado y configurado
‚Ä¢ Cuenta de email configurada en Outlook
‚Ä¢ Windows 10/11

üÜò SOPORTE:
Si tienes problemas, revisa:
1. Que Outlook est√© abierto y funcionando
2. Que tengas permisos de administrador
3. Que los archivos Excel est√©n bien configurados

‚úÖ ¬°Listo para enviar emails profesionalmente!
"""
    
    with open("dist/README.txt", "w", encoding="utf-8") as f:
        f.write(readme_content)
    
    print(f"   üìÑ README.txt creado")

def crear_icono():
    """Crear icono simple para el ejecutable"""
    
    # Este es un icono b√°sico en formato ICO (base64)
    # En un proyecto real, usar√≠as un archivo .ico profesional
    icono_base64 = """
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAQAABILAAASCwAAAAAA
AAAAAAAA////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A
////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
/wD///8A////AP///wD///8A////AP///wD///8A2dnZ/9nZ2f/Z2dn/2dnZ/9nZ2f/Z2dn/
2dnZ/9nZ2f/Z2dn/2dnZ/9nZ2f/Z2dn/2dnZ/////wD///8A////ANnZ2f/Z2dn/2dnZ/9nZ
2f/Z2dn/2dnZ/9nZ2f/Z2dn/2dnZ/9nZ2f/Z2dn/2dnZ/9nZ2f/Z2dn/////AP///wDZ2dn/
2dnZ/9nZ2f/Z2dn/2dnZ/9nZ2f/Z2dn/2dnZ/9nZ2f/Z2dn/2dnZ/9nZ2f/Z2dn/2dnZ////
/wD///8A2dnZ/9nZ2f/Z2dn/2dnZ/9nZ2f/Z2dn/2dnZ/9nZ2f/Z2dn/2dnZ/9nZ2f/Z2dn/
2dnZ/9nZ2f////8A////ANnZ2f/Z2dn/2dnZ/9nZ2f/Z2dn/2dnZ/9nZ2f/Z2dn/2dnZ/9nZ
2f/Z2dn/2dnZ/9nZ2f/Z2dn/////AP///wDZ2dn/2dnZ/9nZ2f/Z2dn/2dnZ/9nZ2f/Z2dn/
2dnZ/9nZ2f/Z2dn/2dnZ/9nZ2f/Z2dn/2dnZ/////wD///8A2dnZ/9nZ2f/Z2dn/2dnZ/9nZ
2f/Z2dn/2dnZ/9nZ2f/Z2dn/2dnZ/9nZ2f/Z2dn/2dnZ/9nZ2f////8A////ANnZ2f/Z2dn/
2dnZ/9nZ2f/Z2dn/2dnZ/9nZ2f/Z2dn/2dnZ/9nZ2f/Z2dn/2dnZ/9nZ2f/Z2dn/////AP//
/wDZ2dn/2dnZ/9nZ2f/Z2dn/2dnZ/9nZ2f/Z2dn/2dnZ/9nZ2f/Z2dn/2dnZ/9nZ2f/Z2dn/
2dnZ/////wD///8A2dnZ/9nZ2f/Z2dn/2dnZ/9nZ2f/Z2dn/2dnZ/9nZ2f/Z2dn/2dnZ/9nZ
2f/Z2dn/2dnZ/9nZ2f////8A////ANnZ2f/Z2dn/2dnZ/9nZ2f/Z2dn/2dnZ/9nZ2f/Z2dn/
2dnZ/9nZ2f/Z2dn/2dnZ/9nZ2f/Z2dn/////AP///wD///8A2dnZ/9nZ2f/Z2dn/2dnZ/9nZ
2f/Z2dn/2dnZ/9nZ2f/Z2dn/2dnZ/9nZ2f/Z2dn/////AP///wD///8A////AP///wD///8A
////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
/wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A
////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAA==
"""
    
    try:
        import base64
        icono_data = base64.b64decode(icono_base64)
        with open("email_icon.ico", "wb") as f:
            f.write(icono_data)
        print(f"   üé® Icono creado")
        return True
    except:
        print(f"   ‚ö†Ô∏è No se pudo crear icono (continuando sin icono)")
        return False

def limpiar_archivos_temporales():
    """Limpiar archivos temporales despu√©s de la compilaci√≥n"""
    
    import shutil
    
    archivos_limpiar = [
        "build",
        "EmailSenderPro.spec",
        "email_icon.ico"
    ]
    
    print(f"\nüßπ Limpiando archivos temporales...")
    
    for archivo in archivos_limpiar:
        try:
            if os.path.isdir(archivo):
                shutil.rmtree(archivo)
                print(f"   üóëÔ∏è Eliminado directorio: {archivo}")
            elif os.path.isfile(archivo):
                os.remove(archivo)
                print(f"   üóëÔ∏è Eliminado archivo: {archivo}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è No se pudo eliminar {archivo}: {e}")

def main():
    """Funci√≥n principal"""
    
    print("üîß PREPARANDO COMPILACI√ìN...")
    
    # Verificar dependencias
    try:
        import pandas
        import openpyxl
        import win32com.client
        print("‚úÖ Dependencias verificadas")
    except ImportError as e:
        print(f"‚ùå Falta dependencia: {e}")
        print("üì• Instala con: pip install pandas openpyxl pywin32")
        return False
    
    # Crear icono
    crear_icono()
    
    # Crear ejecutable
    if crear_ejecutable():
        # Limpiar archivos temporales
        limpiar_archivos_temporales()
        
        print(f"\nüéâ ¬°EJECUTABLE CREADO EXITOSAMENTE!")
        print(f"üìÅ Ubicaci√≥n: dist/EmailSenderPro.exe")
        print(f"üìä Incluye: Archivos Excel, carpetas, README")
        print(f"‚úÖ Listo para distribuir")
        
        return True
    else:
        print(f"\n‚ùå Error creando ejecutable")
        return False

if __name__ == "__main__":
    main()
    input("\nPresiona Enter para cerrar...")